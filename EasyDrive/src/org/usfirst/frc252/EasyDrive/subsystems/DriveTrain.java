// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc252.EasyDrive.subsystems;


import org.usfirst.frc252.EasyDrive.*;
import org.usfirst.frc252.EasyDrive.RobotMap;
import org.usfirst.frc252.EasyDrive.commands.*;

import com.ctre.phoenix.sensors.PigeonIMU;
import com.ctre.phoenix.motorcontrol.can.*;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDSourceType;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.PWMTalonSRX;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends Subsystem{

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	
	
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //private final SpeedController rightMotor = RobotMap.driveTrainRightMotor;
    private final WPI_TalonSRX rightMotor = new WPI_TalonSRX(1);
    private final WPI_TalonSRX leftMotor = new WPI_TalonSRX(2);
    //private final SpeedController leftMotor = RobotMap.driveTrainLeftMotor;
    public final DifferentialDrive differentialDrive1 = new DifferentialDrive(leftMotor, rightMotor);
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    WPI_TalonSRX spareTalon = new WPI_TalonSRX(3);
    PigeonIMU imu = new PigeonIMU(spareTalon);
    double targetAngle;
	double turnThrottle;
	
	double currentAngle;
	double currentAngularRate;
	
	
	//private final double source =
    

	

	
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new NormalDrive());
        differentialDrive1.setSafetyEnabled(false);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    public void drive(double forward, double twist) {
    	//differentialDrive1.tankDrive(left, right);
    	differentialDrive1.arcadeDrive(forward, twist, true);
    	
    	
    	
	}
    
    public void tank(double left, double right) {
    	differentialDrive1.tankDrive(left, right, true);
    }

	/**
	 * Tank style driving for the DriveTrain.
	 *
	 * @param joy The ps3 style joystick to use to drive tank style.
	 */
	public void drive(Joystick joy) {
		drive(-joy.getY(), joy.getTwist());
	
	}
    
	public double[] gyroInfo(){
		double [] ypr = new double[3];
		imu.getYawPitchRoll(ypr);
		double yaw=ypr[0];
		double pitch=ypr[1];
		double roll=ypr[2];
		return ypr;

	}
	
	public double getHeading() {
		double[] ypr_deg = new double[3];
		imu.getYawPitchRoll(ypr_deg);
		return ypr_deg[0];
		//return imu.getFusedHeading();
	}
	
	public double getYawRate() {
		double[] xyz_dps = new double[3];
		imu.getRawGyro(xyz_dps);
		return xyz_dps[0];
	}
	
		
	public void zeroSensors() {
		//leftMotor.getSensorCollection().setQuadraturePosition(0, 0);
		//rightMotor.getSensorCollection().setQuadraturePosition(0, 0);
		imu.setYaw(0, 0);
		imu.setAccumZAngle(0, 0);
		imu.setFusedHeading(0, 0);
		System.out.println("Sensors Zeroed");
	}


	
		
	
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

